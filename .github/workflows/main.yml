name: Build

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform: 
        - { name: Ubuntu 20.04,                   os: ubuntu-20.04,   shell: bash, artifact: 'SDL-ubuntu20.04', cmake: '-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32'}

    steps:

    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build gcc-multilib g++-multilib libibus-1.0-dev
        sudo apt-get install build-essential git \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev \
            gcc-multilib g++-multilib


    - uses: actions/checkout@v3
    - name: Check that versioning is consistent
      # We only need to run this once: arbitrarily use the Linux/CMake build
      if: "runner.os == 'Linux'"
      run: ./build-scripts/test-versioning.sh
    - name: Configure (CMake)
      run: |
        ${{ matrix.platform.source_cmd }}
        cmake -S . -B build -G Ninja \
          -Wdeprecated -Wdev -Werror \
          -DSDL_SHARED=ON \
          -DSDL_STATIC=ON \
          -DSDL_TESTS=ON \
          -DSDL_IBUS=FALSE \
          -DSDL_WERROR=ON \
          -DSDL_INSTALL_TESTS=ON \
          -DSDL_VENDOR_INFO="Github Workflow" \
          -DSDL_CLANG_TIDY=ON \
          -DCMAKE_INSTALL_PREFIX=cmake_prefix \
          -DCMAKE_BUILD_TYPE=Release \
          ${{ matrix.platform.cmake }}
    - name: Build (CMake)
      run: |
        ${{ matrix.platform.source_cmd }}
        cmake --build build/ --config Release --verbose --parallel
    - name: Run build-time tests (CMake)
      run: |
        set -eu
        ${{ matrix.platform.source_cmd }}
        export SDL_TESTS_QUICK=1
        ctest -VV --test-dir build/
        if test "${{ runner.os }}" = "Linux"; then
          # This should show us the SDL_REVISION
          strings build/libSDL3.so.0 | grep SDL-
        fi
    - name: Install (CMake)
      run: |
        set -eu
        ${{ matrix.platform.source_cmd }}
        cmake --install build/ --config Release
        ( cd cmake_prefix; find . ) | LC_ALL=C sort -u
    - name: Package (CPack)
      run: |
        cmake --build build/ --config Release --target package
    - name: Verify CMake configuration files
      run: |
        ${{ matrix.platform.source_cmd }}
        cmake -S cmake/test -B cmake_config_build -G Ninja \
          -DTEST_SHARED=ON \
          -DTEST_STATIC=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_PREFIX_PATH=$(echo "${{ github.workspace }}/cmake_prefix" | sed  -e 's#\\#/#g')
        cmake --build cmake_config_build --verbose
    - name: Verify sdl3.pc
      if: ${{ !matrix.platform.skip_test_pkgconfig }}
      run: |
        ${{ matrix.platform.source_cmd }}
        export PKG_CONFIG_PATH=$(echo "${{ github.workspace }}/cmake_prefix/lib/pkgconfig" | sed  -e 's#\\#/#g')
        cmake/test/test_pkgconfig.sh
    - uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: ${{ matrix.platform.artifact }}
        path: build/dist/SDL3*
